// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Post extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Post entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Post must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Post", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Post | null {
    return changetype<Post | null>(store.get("Post", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _author(): Bytes {
    let value = this.get("_author");
    return value!.toBytes();
  }

  set _author(value: Bytes) {
    this.set("_author", Value.fromBytes(value));
  }

  get _title(): string {
    let value = this.get("_title");
    return value!.toString();
  }

  set _title(value: string) {
    this.set("_title", Value.fromString(value));
  }

  get _media(): string {
    let value = this.get("_media");
    return value!.toString();
  }

  set _media(value: string) {
    this.set("_media", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }
}

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get _wallet(): Bytes {
    let value = this.get("_wallet");
    return value!.toBytes();
  }

  set _wallet(value: Bytes) {
    this.set("_wallet", Value.fromBytes(value));
  }

  get _username(): string {
    let value = this.get("_username");
    return value!.toString();
  }

  set _username(value: string) {
    this.set("_username", Value.fromString(value));
  }

  get _name(): string {
    let value = this.get("_name");
    return value!.toString();
  }

  set _name(value: string) {
    this.set("_name", Value.fromString(value));
  }

  get _bio(): string {
    let value = this.get("_bio");
    return value!.toString();
  }

  set _bio(value: string) {
    this.set("_bio", Value.fromString(value));
  }

  get _avatar(): string {
    let value = this.get("_avatar");
    return value!.toString();
  }

  set _avatar(value: string) {
    this.set("_avatar", Value.fromString(value));
  }

  get posts(): Array<Bytes> {
    let value = this.get("posts");
    return value!.toBytesArray();
  }

  set posts(value: Array<Bytes>) {
    this.set("posts", Value.fromBytesArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
